use alienfile;
use strict;
use warnings;
use Config;

sub install_upb {
    my ($build) = @_;

    my $build_dir  = $build->install_prop->{extract};
    my $target_dir = $build->install_prop->{prefix};

    require File::Spec;
    require File::Copy;
    require File::Path;
    require File::Find;
    require File::Basename;

    my @libs = glob "lib/*.a";
    my @headers;

    File::Find::find({
        wanted => sub {
            return unless -f $_ && /\b\.h$/;
            push @headers, $_;
        },
        no_chdir => 1,
    }, 'upb');

    for my $lib (@libs) {
        my $dest = File::Spec->catfile($target_dir, $lib);

        my $dest_dirname = File::Basename::dirname($dest);
        File::Path::mkpath($dest_dirname);
        File::Copy::copy($lib, $dest)
            or die "Error copying '$lib' to '$dest': $!";
    }

    for my $header (@headers) {
        my $dest = File::Spec->catfile($target_dir, 'include', $header);

        my $dest_dirname = File::Basename::dirname($dest);
        File::Path::mkpath($dest_dirname);
        File::Copy::copy($header, $dest)
            or die "Error copying '$header' to '$dest': $!";
    }
}

share {
    require Alien::Protobuf3_1_0;

    plugin 'Download' => (
        url => 'https://github.com/mbarbon/upb/archive/e42be46f19d4bca6aee063ce947f6974d790892e.zip',
    );

    plugin Extract => 'zip';

    my $protobuf_ccflags = Alien::Protobuf3_1_0->cflags;
    my $protobuf_libs    = Alien::Protobuf3_1_0->libs_static;

    build [
        [
            '%{make}',
                'default',
                'googlepb',
                'CFLAGS= -std=c99 -fPIC -Wno-unused-parameter ' . $protobuf_ccflags,
                'USER_CPPFLAGS= -std=c++11 -fPIC -Wno-unused-parameter -Wno-keyword-macro -Wno-deprecated-declarations ' . $protobuf_ccflags,
        ],
        \&install_upb,
    ];

    gather sub {
        my ($build) = @_;
        my $prefix = $build->runtime_prop->{prefix};
        # -DNDEBUG works around https://github.com/google/upb/issues/63
        $build->runtime_prop->{cflags}      = "-I$prefix/include -DNDEBUG";

        # library include order is important to get this to compile with musl (i.e. in Alpine):
        my @libs_in_order = qw(
            upb.bindings.googlepb
            upb
            upb.json
            upb.descriptor
            upb.pb
        );
        my $lib_dir     = File::Spec->catfile($prefix, 'lib');
        my $libs        = join " ", "-L$lib_dir", map "-l$_", @libs_in_order;
        my $lib_ext     = $Config{lib_ext};
        my $libs_static = join " ", $libs, map File::Spec->catfile($lib_dir, "lib${_}${lib_ext}"), @libs_in_order;

        $build->runtime_prop->{libs}        = $libs;
        $build->runtime_prop->{libs_static} = $libs_static;
    };
};

